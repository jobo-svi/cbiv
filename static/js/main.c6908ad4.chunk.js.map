{"version":3,"sources":["components/UndefinedElement.js","components/ComponentFactory.js","components/Header.js","components/Paragraph.js","components/Image.js","components/FlipCard.js","components/DefaultDroppable.js","components/GridRow.js","components/GridColumn.js","components/DnDGridColumn.js","components/Grid.js","components/BuilderElementsMenuItem.js","components/BuilderElementsMenu.js","components/ItemEditor.js","components/BuilderNavbar.js","components/PlacementPreview.js","hooks/useTimeout.js","hooks/useMousePosition.js","data.js","modifiers/snapDragHandleToCursor.js","components/DebugValues.js","components/Builder.js","App.js","reportWebVitals.js","index.js"],"names":["UndefinedElement","props","react_default","a","createElement","className","index_es","icon","element","Components","header","type","text","component","defaultHeight","paragraph","image","style","justifyContent","horizontalAlignment","alignItems","verticalAlignment","src","alt","flipcard","front","back","constructComponent","item","React","getProps","key","id","_i","_Object$entries","Object","entries","length","_ref3","_ref2","slicedToArray","value","isChildComponent","hasOwnProperty","components_UndefinedElement","DefaultDroppable","_useDroppable","useDroppable","isOver","setNodeRef","ref","height","background","borderStyle","borderColor","GridRow","data","row","children","GridColumn","forwardRef","column","concat","onMouseOver","setShowDragHandle","onMouseOut","objectSpread","positionStyle","DnDGridColumn","setDroppableNodeRef","rowId","_useDraggable","useDraggable","setDraggableNodeRef","listeners","attributes","isDragging","useCombinedRefs","_useState","useState","_useState2","showDragHandle","classes","push","components_GridColumn","assign","join","display","Grid","_ref","items","onGridItemClick","dropTargetIndex","placementPreviewStyle","relativeHoverPosition","translateTiming","columnTimerActive","gridGap","draggingElement","getRowStyle","rowIndex","isWithinElement","transition","transform","getColumnStyle","columnIndex","noOfColumns","flex","gap","columnWidth","document","getElementById","getBoundingClientRect","width","components_DefaultDroppable","map","components_GridRow","columns","components_DnDGridColumn","onClick","BuilderElementsMenuItem","touchAction","BuilderElementsMenu","components_BuilderElementsMenuItem","ItemEditor","JSON","parse","stringify","setItem","flexDirection","onChange","e","temp","target","onSaveChanges","BuilderNavbar","PlacementPreview","visibility","useTimeout","callback","delay","timeoutRef","useRef","savedCallback","useEffect","current","window","setTimeout","clearTimeout","useMousePosition","mousePosition","x","y","updateMousePosition","ev","clientX","clientY","addEventListener","removeEventListener","content","body","uuid","snapDragHandleToCursor","activatorEvent","draggingNodeRect","activatorCoordinates","getEventCoordinates","offsetX","left","offsetY","top","DebugValues","setTranslateTiming","columnDelayTiming","setColumnDelayTiming","slopTiming","setSlopTiming","setGridGap","localStorage","flexWrap","marginBottom","event","parseInt","PageBuilder","mouseSensor","useSensor","MouseSensor","activationConstraint","distance","touchSensor","TouchSensor","tolerance","sensors","useSensors","setItems","_useState3","_useState4","setDraggingElement","_useState5","_useState6","closestRow","setClosestRow","dragCollisions","gridWrapperRef","placementPreviewRef","defaultPlacementPreviewStyle","_useState7","_useState8","setPlacementPreviewStyle","_useState9","_useState10","debouncedPlacementPreviewStyle","setDebouncedPlacementPreviewStyle","_useState11","_useState12","itemToEdit","setItemToEdit","_useState13","_useState14","setRelativeHoverPosition","_useState15","_useState16","debouncedRelativeHoverPosition","setDebouncedRelativeHoverPosition","_useState17","_useState18","setDropTargetIndex","_useState19","_useState20","debouncedDropTargetIndex","setDebouncedDropTargetIndex","_useState21","_useState22","setColumnTimerActive","_useState23","getItem","_useState24","_useState25","_useState26","_useState27","_useState28","_useState29","_useState30","_useState31","_useState32","uiTimerActive","setUITimerActive","c","find","droppableContainer","rect","newStyle","updatePlacementPreviewStyle","previewHeight","getPreviewHeight","additional","isValidPlacement","columnCount","i","columnXOffset","getClosestRow","collisions","filter","addElement","index","elementType","within","newItems","toConsumableArray","newOb","splice","getComponentForPreview","flatMap","validPlacement","findIndex","oldStyle","previewStyle","shouldUpdatePlacementPreviewStyle","cursor","components_BuilderNavbar","core_esm","onDragStart","active","clientHeight","onDragEnd","dropIndex","indexOf","col","moveElement","onDragMove","hoverRect","elementHeight","borderTop","borderBottom","bottom","topRange","bottomRange","clientOffset","hoveringWithinElement","right","insideTop","insideBottom","insideCenter","aboveElement","belowElement","dropTarget","hoverPosition","collisionDetection","closestCenter","autoScroll","modifiers","components_DebugValues","components_Grid","console","log","overflow","components_ItemEditor","updatedItem","components_BuilderElementsMenu","dropAnimation","components_PlacementPreview","library","add","faImage","faHeading","faParagraph","faTriangleExclamation","faUpDownLeftRight","App","Builder","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.c6908ad4.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst UndefinedElement = (props) => {\n  return (\n    <div className=\"undefined-element\">\n      <FontAwesomeIcon icon=\"fa-solid fa-triangle-exclamation\" />\n      <span className=\"message\">\n        The element '{props.element}' could not be found\n      </span>\n      <FontAwesomeIcon icon=\"fa-solid fa-triangle-exclamation\" />\n    </div>\n  );\n};\n\nexport default UndefinedElement;\n","import React from \"react\";\nimport FlipCard from \"./FlipCard\";\nimport Image from \"./Image\";\nimport Header from \"./Header\";\nimport Paragraph from \"./Paragraph\";\nimport UndefinedElement from \"./UndefinedElement\";\n\nexport const Components = {\n    header: {\n        type: Header,\n        component: \"header\",\n        props: {\n            text: \"My Header\",\n        },\n        defaultHeight: 48,\n    },\n    paragraph: {\n        type: Paragraph,\n        component: \"paragraph\",\n        props: {\n            text:\n                \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris mattis felis sed suscipit consequat. Nullam feugiat quam sit amet est tincidunt, nec malesuada augue posuere. Curabitur posuere libero eu nunc rhoncus, sit amet ullamcorper magna mattis. Nullam et mauris in risus malesuada fringilla ut et lacus. Phasellus congue at velit ac cursus. Integer pretium magna vitae ex vehicula lobortis. Morbi tincidunt purus a lorem pharetra molestie. Morbi ac volutpat diam. In sollicitudin luctus dictum. In sollicitudin nisl sapien, ut dignissim nibh consectetur vitae.\",\n        },\n        defaultHeight: 96,\n    },\n    image: {\n        type: Image,\n        component: \"image\",\n        props: {\n            src: `img/image-2.jpg`,\n            alt: \"Alt Text\",\n        },\n        defaultHeight: 826,\n    },\n    flipcard: {\n        type: FlipCard,\n        component: \"flipcard\",\n        defaultHeight: 300,\n    },\n    // columnlayout: {\n    //     type: ColumnLayout,\n    // },\n};\n\n// TODO: need a map of what components can be children of what other components,\n// and throw an error or ignore if invalid, ie: flipcard's child can't be another flipcard.\n\n// Get the props for a component. Recursively handle nested sub-components\nconst getProps = (item) => {\n    const props = {\n        key: item.id,\n    };\n\n    if (!item.props) {\n        return props;\n    }\n    for (const [key, value] of Object.entries(item.props)) {\n        const isChildComponent =\n            value !== null &&\n            typeof value === \"object\" &&\n            value.hasOwnProperty(\"component\");\n\n        if (isChildComponent) {\n            props[key] = React.createElement(\n                Components[value.component].type,\n                getProps(value)\n            );\n        } else {\n            props[key] = value;\n        }\n    }\n\n    return props;\n};\n\nexport const constructComponent = (item) => {\n    if (\n        Components[item.component] &&\n        typeof Components[item.component].type !== \"undefined\"\n    ) {\n        return React.createElement(\n            Components[item.component].type,\n            getProps(item)\n        );\n    }\n\n    return React.createElement(\n        () => <UndefinedElement element={item.component} />,\n        { key: item.id }\n    );\n};\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n}\n","import React from \"react\";\n\nconst Header = (props) => {\n  return <h1>{props.text}</h1>;\n};\n\nexport default Header;\n","import React from \"react\";\r\n\r\nconst Paragraph = (props) => {\r\n    return <p>{props.text}</p>;\r\n};\r\n\r\nexport default Paragraph;\r\n","import React from \"react\";\n\nconst Image = (props) => {\n  return (\n    <div\n      className=\"image-component\"\n      style={{\n        justifyContent: props.horizontalAlignment,\n        alignItems: props.verticalAlignment,\n      }}\n    >\n      <img src={props.src} alt={props.alt} />\n    </div>\n  );\n};\n\nexport default Image;\n","import React, { useEffect, useState } from \"react\";\n\nconst FlipCard = (props) => {\n  // const items = props.items.map(item => {\n  //   return React.createElement(item.)\n  // })\n\n  return (\n    <div className=\"flip-card-container\">\n      <div className=\"flip-card\">\n        <div className=\"flip-card-inner\">\n          <div className=\"flip-card-front\">{props.front}</div>\n          <div className=\"flip-card-back\">{props.back}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FlipCard;\n","import React from \"react\";\r\nimport { useDroppable } from \"@dnd-kit/core\";\r\n\r\nconst DefaultDroppable = (props) => {\r\n    const { isOver, setNodeRef } = useDroppable({\r\n        id: \"initial-droppable\",\r\n    });\r\n    return (\r\n        <div\r\n            id=\"initial-droppable\"\r\n            ref={setNodeRef}\r\n            style={{\r\n                height: \"100px\",\r\n                background: isOver ? \"#cae4ff\" : \"#FFF\",\r\n                borderStyle: \"dashed\",\r\n                borderColor: \"#A2A2A2\",\r\n            }}\r\n        ></div>\r\n    );\r\n};\r\n\r\nexport default DefaultDroppable;\r\n","import React, { useState } from \"react\";\r\nimport { useDroppable } from \"@dnd-kit/core\";\r\n\r\nconst GridRow = (props) => {\r\n    const { setNodeRef } = useDroppable({\r\n        id: props.id,\r\n        data: {\r\n            type: \"row\",\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div\r\n            id={props.row.id}\r\n            key={props.row.id}\r\n            ref={setNodeRef}\r\n            className=\"grid-row\"\r\n            style={props.style}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GridRow;\r\n","import React, { forwardRef } from \"react\";\r\n\r\nconst GridColumn = forwardRef((props, ref) => {\r\n    return (\r\n        <div\r\n            id={props.column.id}\r\n            key={props.column.id}\r\n            ref={ref}\r\n            className={`grid-column ${props.className}`}\r\n            onMouseOver={() => props.setShowDragHandle(true)}\r\n            onMouseOut={() => props.setShowDragHandle(false)}\r\n            style={{\r\n                ...props.positionStyle,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default GridColumn;\r\n","import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useDroppable, useDraggable } from \"@dnd-kit/core\";\r\nimport { useCombinedRefs } from \"@dnd-kit/utilities\";\r\nimport GridColumn from \"./GridColumn\";\r\n\r\n// Wrapper component for GridColumn where we wire up all the drag and drop stuff and forward the ref to GridColumn.\r\n// This way, we don't have to generate extra wrapper elements.\r\nconst DnDGridColumn = (props) => {\r\n    const { setNodeRef: setDroppableNodeRef } = useDroppable({\r\n        id: props.id,\r\n        data: {\r\n            type: \"column\",\r\n            rowId: props.rowId,\r\n        },\r\n    });\r\n\r\n    const {\r\n        setNodeRef: setDraggableNodeRef,\r\n        listeners,\r\n        attributes,\r\n        isDragging,\r\n    } = useDraggable({\r\n        id: props.id,\r\n        data: { rowId: props.rowId, ...props.data },\r\n    });\r\n\r\n    // This component is both draggable and droppable, so we have to combine the refs into one.\r\n    const setNodeRef = useCombinedRefs(\r\n        setDroppableNodeRef,\r\n        setDraggableNodeRef\r\n    );\r\n\r\n    const [showDragHandle, setShowDragHandle] = useState(false);\r\n\r\n    const classes = [];\r\n\r\n    if (showDragHandle) {\r\n        classes.push(\"drag-handle-visible\");\r\n    }\r\n\r\n    // Leave the component in its original location, but grayed-out, while moving it.\r\n    if (isDragging) {\r\n        classes.push(\"dragging\");\r\n    }\r\n\r\n    return (\r\n        <GridColumn\r\n            ref={setNodeRef}\r\n            showDragHandle={showDragHandle}\r\n            setShowDragHandle={setShowDragHandle}\r\n            className={classes.join(\" \")}\r\n            {...props}\r\n        >\r\n            {props.children}\r\n            <div\r\n                {...listeners}\r\n                {...attributes}\r\n                className=\"drag-handle\"\r\n                style={{\r\n                    display: showDragHandle ? \"\" : \"none\",\r\n                }}\r\n            >\r\n                <FontAwesomeIcon icon=\"fa-solid fa-up-down-left-right\" />\r\n            </div>\r\n        </GridColumn>\r\n    );\r\n};\r\n\r\nexport default DnDGridColumn;\r\n","import React, { forwardRef } from \"react\";\nimport { constructComponent } from \"./ComponentFactory\";\nimport DefaultDroppable from \"./DefaultDroppable\";\nimport GridRow from \"./GridRow\";\nimport DnDGridColumn from \"./DnDGridColumn\";\n\nconst Grid = forwardRef(\n    (\n        {\n            items,\n            onGridItemClick,\n            dropTargetIndex,\n            placementPreviewStyle,\n            relativeHoverPosition,\n            translateTiming,\n            columnTimerActive,\n            gridGap,\n            draggingElement,\n        },\n        ref\n    ) => {\n        function getRowStyle(rowIndex) {\n            let style = {};\n\n            const isWithinElement =\n                relativeHoverPosition === \"center\" &&\n                rowIndex === dropTargetIndex;\n\n            // Don't apply any transforms if we're not trying to drop anywhere\n            if (dropTargetIndex === null) {\n                // Not sure why this works, but it prevents the elements from \"jumping\" when you finish dragging\n                if (draggingElement !== null) {\n                    style.transition = `transform ${translateTiming}ms ease 0s`;\n                }\n\n                return style;\n            }\n\n            // Hovering within the element and we've waited long enough to combine columns\n            if (isWithinElement && !columnTimerActive) {\n                style.justifyContent = \"unset\";\n                style.transition = `transform ${translateTiming}ms ease 0s`;\n            }\n            // Shift rows downward if they're below where we're trying to drop\n            else if (\n                rowIndex >= dropTargetIndex &&\n                relativeHoverPosition !== \"center\"\n            ) {\n                style.transition = `transform ${translateTiming}ms ease 0s`;\n                style.transform = `translate3d(0px, ${placementPreviewStyle.height +\n                    gridGap}px, 0px)`;\n            }\n            // We're waiting on column timer, or cursor is below all elements, so shift all elements back to original position\n            else {\n                style.transition = `transform ${translateTiming}ms ease 0s`;\n                style.transform = `translate3d(0px, 0px, 0px)`;\n            }\n\n            return style;\n        }\n\n        function getColumnStyle(rowIndex, columnIndex, noOfColumns) {\n            let style = {\n                transition: `width ${translateTiming}ms ease 0s`,\n            };\n\n            // // manually de-transitioning width may not be possible while using flex. Might need to disable flex...?\n            // const match = document.getElementById(items[rowIndex].id);\n            // if (match) {\n            //     const rowWidth = match.getBoundingClientRect().width;\n            //     console.log(\"col width\", rowWidth / noOfColumns);\n            //     style.width = `${rowWidth / 2}px`;\n            // }\n\n            const isWithinElement =\n                relativeHoverPosition === \"center\" &&\n                rowIndex === dropTargetIndex;\n            if (isWithinElement && !columnTimerActive) {\n                // There's definitely a better way to get row width, but this will do for now.\n                style.flex = \"unset\";\n                const gap = gridGap * noOfColumns;\n                const rowWidth = document\n                    .getElementById(items[rowIndex].id)\n                    .getBoundingClientRect().width;\n                const columnWidth = (rowWidth - gap) / (noOfColumns + 1);\n                style.width = `${columnWidth}px`;\n            }\n            return style;\n        }\n\n        return (\n            <div className=\"grid-wrapper\" ref={ref}>\n                <div className=\"grid\" style={{ gap: gridGap }}>\n                    {items.length === 0 && <DefaultDroppable />}\n                    {items.length > 0 &&\n                        items.map((row, rowIndex) => {\n                            return (\n                                <GridRow\n                                    id={row.id}\n                                    key={row.id}\n                                    row={row}\n                                    style={{\n                                        ...getRowStyle(rowIndex),\n                                        gap: gridGap,\n                                    }}\n                                >\n                                    {row.columns.map((item, columnIndex) => {\n                                        return (\n                                            <DnDGridColumn\n                                                id={item.id}\n                                                rowId={row.id}\n                                                key={item.id}\n                                                column={item}\n                                                onClick={() =>\n                                                    onGridItemClick(item)\n                                                }\n                                                positionStyle={getColumnStyle(\n                                                    rowIndex,\n                                                    columnIndex,\n                                                    row.columns.length\n                                                )}\n                                            >\n                                                {constructComponent(item)}\n                                            </DnDGridColumn>\n                                        );\n                                    })}\n                                </GridRow>\n                            );\n                        })}\n                </div>\n            </div>\n        );\n    }\n);\n\nexport default Grid;\n","import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useDraggable } from \"@dnd-kit/core\";\r\n\r\nconst BuilderElementsMenuItem = (props) => {\r\n    const { attributes, listeners, setNodeRef } = useDraggable({\r\n        id: props.id,\r\n        data: props.data,\r\n    });\r\n\r\n    return (\r\n        <div\r\n            ref={setNodeRef}\r\n            {...listeners}\r\n            {...attributes}\r\n            style={{ touchAction: \"manipulation\" }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BuilderElementsMenuItem;\r\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"../css/App.css\";\nimport BuilderElementsMenuItem from \"./BuilderElementsMenuItem\";\nimport { Components } from \"./ComponentFactory\";\n\nconst BuilderElementsMenu = (props) => {\n    return (\n        <div className=\"builder-elements-menu\">\n            <div className=\"element-wrapper\">\n                <BuilderElementsMenuItem\n                    id=\"header-menu-item\"\n                    data={{\n                        type: \"header\",\n                        height: Components.header.defaultHeight,\n                    }}\n                >\n                    <button className=\"element\">\n                        <FontAwesomeIcon icon=\"fa-solid fa-heading\" /> HEADER\n                    </button>\n                </BuilderElementsMenuItem>\n            </div>\n            <div className=\"element-wrapper\">\n                <BuilderElementsMenuItem\n                    id=\"paragraph-menu-item\"\n                    data={{\n                        type: \"paragraph\",\n                        height: Components.paragraph.defaultHeight,\n                    }}\n                >\n                    <button className=\"element\">\n                        <FontAwesomeIcon icon=\"fa-solid fa-paragraph\" />\n                        PARAGRAPH\n                    </button>\n                </BuilderElementsMenuItem>\n            </div>\n            <div className=\"element-wrapper\">\n                <BuilderElementsMenuItem\n                    id=\"image-menu-item\"\n                    data={{\n                        type: \"image\",\n                        height: Components.image.defaultHeight,\n                    }}\n                >\n                    <button className=\"element\">\n                        <FontAwesomeIcon icon=\"fa-solid fa-image\" />\n                        IMAGE\n                    </button>\n                </BuilderElementsMenuItem>\n            </div>\n            <div className=\"element-wrapper\">\n                <BuilderElementsMenuItem\n                    id=\"flipcard-menu-item\"\n                    data={{\n                        type: \"flipcard\",\n                        height: Components.flipcard.defaultHeight,\n                    }}\n                >\n                    <button className=\"element\">\n                        <FontAwesomeIcon icon=\"fa-solid fa-image\" />\n                        FLIP CARD\n                    </button>\n                </BuilderElementsMenuItem>\n            </div>\n        </div>\n    );\n};\n\nexport default BuilderElementsMenu;\n","import React, { useState, useEffect } from \"react\";\nimport { Components, constructComponent } from \"./ComponentFactory\";\n\nconst ItemEditor = (props) => {\n  // Create a deep copy of the item to be edited,\n  const [item, setItem] = useState(JSON.parse(JSON.stringify(props.item)));\n\n  const handleTextChange = (e) => {\n    let temp = { ...item };\n    temp.props.text = e.target.value;\n    setItem(temp);\n  };\n\n  return (\n    <div\n      className=\"item-editor\"\n      style={{ display: \"flex\", flexDirection: \"column\" }}\n    >\n      {constructComponent(props.item)}\n      <input type=\"text\" onChange={handleTextChange} value={item.props.text} />\n      <button onClick={() => props.onSaveChanges(item)}>SAVE</button>\n    </div>\n  );\n};\n\nexport default ItemEditor;","import \"../css/App.css\";\r\nimport React from \"react\";\r\n\r\nconst BuilderNavbar = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div className=\"course\">\r\n                <span className=\"course-image\"></span>\r\n                <span className=\"course-title\">Course Title (edit)</span>\r\n            </div>\r\n            <div className=\"options\">\r\n                {/* <span className=\"option\">Cancel</span>\r\n            <span className=\"option\">Save</span>\r\n            <span className=\"option\">Publish</span> */}\r\n                <span className=\"option preview\">Preview</span>\r\n                {/* <span className=\"option\">Gear icon</span>\r\n            <span className=\"option\">Chart icon</span> */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BuilderNavbar;\r\n","import React, { useEffect, forwardRef } from \"react\";\r\n\r\nconst PlacementPreview = forwardRef((props, ref) => {\r\n    return (\r\n        <div id=\"placement-preview\" ref={ref} style={{ ...props.style }}>\r\n            <div className=\"overlay\"></div>\r\n            <div style={{ visibility: \"hidden\" }}>{props.children}</div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default PlacementPreview;\r\n","import React, { useEffect, useRef } from \"react\";\r\n\r\nexport default function useTimeout(callback, delay) {\r\n    const timeoutRef = useRef(null);\r\n    const savedCallback = useRef(callback);\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n    useEffect(() => {\r\n        const tick = () => savedCallback.current();\r\n        if (typeof delay === \"number\") {\r\n            timeoutRef.current = window.setTimeout(tick, delay);\r\n            return () => window.clearTimeout(timeoutRef.current);\r\n        }\r\n    }, [delay]);\r\n    return timeoutRef;\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\n\r\nconst useMousePosition = () => {\r\n    const mousePosition = useRef({\r\n        x: null,\r\n        y: null,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const updateMousePosition = (ev) => {\r\n            mousePosition.current = { x: ev.clientX, y: ev.clientY };\r\n        };\r\n        window.addEventListener(\"pointermove\", updateMousePosition);\r\n        return () => {\r\n            window.removeEventListener(\"pointermove\", updateMousePosition);\r\n        };\r\n    }, []);\r\n    return mousePosition;\r\n};\r\n\r\nexport default useMousePosition;\r\n","import uuid from \"react-uuid\";\n\nexport const data = {\n    content: {\n        body: [\n            {\n                id: uuid(),\n                columns: [\n                    {\n                        id: uuid(),\n                        component: \"paragraph\",\n                        props: {\n                            text:\n                                \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris mattis felis sed suscipit consequat. Nullam feugiat quam sit amet est tincidunt, nec malesuada augue posuere. Curabitur posuere libero eu nunc rhoncus, sit amet ullamcorper magna mattis. Nullam et mauris in risus malesuada fringilla ut et lacus. Phasellus congue at velit ac cursus. Integer pretium magna vitae ex vehicula lobortis. Morbi tincidunt purus a lorem pharetra molestie. Morbi ac volutpat diam. In sollicitudin luctus dictum. In sollicitudin nisl sapien, ut dignissim nibh consectetur vitae.\",\n                        },\n                    },\n                ],\n            },\n        ],\n    },\n};\n","import { Modifier } from \"@dnd-kit/core\";\r\nimport { getEventCoordinates } from \"@dnd-kit/utilities\";\r\n\r\n// Custom drag handle modifier that \"snaps\" the drag handle to your cursor.\r\n// Based on the \"snapCenterToCursor\" modifier from dnd-kit.\r\nexport const snapDragHandleToCursor = ({\r\n    activatorEvent,\r\n    draggingNodeRect,\r\n    transform,\r\n}) => {\r\n    if (draggingNodeRect && activatorEvent) {\r\n        const activatorCoordinates = getEventCoordinates(activatorEvent);\r\n\r\n        if (!activatorCoordinates) {\r\n            return transform;\r\n        }\r\n\r\n        const offsetX = activatorCoordinates.x - draggingNodeRect.left;\r\n        const offsetY = activatorCoordinates.y - draggingNodeRect.top;\r\n\r\n        return {\r\n            ...transform,\r\n            x: transform.x + offsetX - draggingNodeRect.width,\r\n            y: transform.y + offsetY - draggingNodeRect.height / 2,\r\n        };\r\n    }\r\n\r\n    return transform;\r\n};\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst DebugValues = ({\r\n    translateTiming,\r\n    setTranslateTiming,\r\n    columnDelayTiming,\r\n    setColumnDelayTiming,\r\n    slopTiming,\r\n    setSlopTiming,\r\n    gridGap,\r\n    setGridGap,\r\n}) => {\r\n    // Persists debug settings across sessions\r\n    useEffect(() => {\r\n        localStorage.setItem(\"translateTiming\", translateTiming);\r\n        localStorage.setItem(\"columnDelayTiming\", columnDelayTiming);\r\n        localStorage.setItem(\"gridGap\", gridGap);\r\n        localStorage.setItem(\"slopTiming\", slopTiming);\r\n    }, [translateTiming, columnDelayTiming, gridGap, slopTiming]);\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                gap: \"20px\",\r\n                marginBottom: \"40px\",\r\n            }}\r\n        >\r\n            <label>\r\n                <div>Translate speed (ms)</div>\r\n                <input\r\n                    type=\"number\"\r\n                    value={translateTiming}\r\n                    onChange={(event) =>\r\n                        setTranslateTiming(parseInt(event.target.value))\r\n                    }\r\n                />\r\n            </label>\r\n            <label>\r\n                <div>Column hover time (ms)</div>\r\n                <input\r\n                    type=\"number\"\r\n                    value={columnDelayTiming}\r\n                    onChange={(event) =>\r\n                        setColumnDelayTiming(parseInt(event.target.value))\r\n                    }\r\n                />\r\n            </label>\r\n            <label>\r\n                <div>Slop time (ms)</div>\r\n                <input\r\n                    type=\"number\"\r\n                    value={slopTiming}\r\n                    onChange={(event) =>\r\n                        setSlopTiming(parseInt(event.target.value))\r\n                    }\r\n                />\r\n            </label>\r\n            <label>\r\n                <div>Space between rows/cols</div>\r\n                <input\r\n                    type=\"number\"\r\n                    value={gridGap}\r\n                    onChange={(event) =>\r\n                        setGridGap(parseInt(event.target.value))\r\n                    }\r\n                />\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DebugValues;\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport {\n    DndContext,\n    closestCenter,\n    DragOverlay,\n    MouseSensor,\n    TouchSensor,\n    useSensor,\n    useSensors,\n} from \"@dnd-kit/core\";\nimport uuid from \"react-uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Grid from \"./Grid\";\nimport BuilderElementsMenu from \"./BuilderElementsMenu\";\nimport ItemEditor from \"./ItemEditor\";\nimport BuilderNavbar from \"./BuilderNavbar\";\nimport PlacementPreview from \"./PlacementPreview\";\nimport { Components, constructComponent } from \"./ComponentFactory\";\nimport useTimeout from \"../hooks/useTimeout\";\nimport useMousePosition from \"../hooks/useMousePosition\";\nimport { data } from \"../data\";\nimport \"../css/App.css\";\nimport { snapDragHandleToCursor } from \"../modifiers/snapDragHandleToCursor\";\nimport DebugValues from \"./DebugValues\";\n\nconst PageBuilder = () => {\n    // dndkit sensors\n    const mouseSensor = useSensor(MouseSensor, {\n        // Require the mouse to move by 1 pixel before activating, so we can differentiate between drag and click\n        activationConstraint: {\n            distance: 1,\n        },\n    });\n\n    const touchSensor = useSensor(TouchSensor, {\n        // Press, with tolerance of 5px of movement\n        activationConstraint: {\n            tolerance: 5,\n        },\n    });\n\n    const sensors = useSensors(mouseSensor, touchSensor);\n\n    // The lesson elements\n    const [items, setItems] = useState(data.content.body);\n\n    // What element we're currently dragging, needed so we can measure it and show a placeholder in the dom\n    const [draggingElement, setDraggingElement] = useState(null);\n\n    // Closest element to your cursor when dragging, as determined by dnd-kit\n    const [closestRow, setClosestRow] = useState(null);\n\n    // Elements your drag element is intersecting with while dragging. This array changes a lot so I made it a ref instead of state.\n    const dragCollisions = useRef(null);\n\n    // Track the position of the mouse for positioning the drag preview\n    const mousePosition = useMousePosition();\n\n    // Measure the height of the grid content\n    const gridWrapperRef = useRef(null);\n\n    // Keep a reference to the placement preview, for measuring its height\n    const placementPreviewRef = useRef(null);\n\n    const defaultPlacementPreviewStyle = {\n        visibility: \"hidden\",\n        height: 0,\n    };\n    const [placementPreviewStyle, setPlacementPreviewStyle] = useState(\n        defaultPlacementPreviewStyle\n    );\n\n    const [\n        debouncedPlacementPreviewStyle,\n        setDebouncedPlacementPreviewStyle,\n    ] = useState(placementPreviewStyle);\n\n    const [itemToEdit, setItemToEdit] = useState(null);\n\n    // Position of the dragged element relative to the element being hovered over (above, below, center)\n    const [relativeHoverPosition, setRelativeHoverPosition] = useState(null);\n    const [\n        debouncedRelativeHoverPosition,\n        setDebouncedRelativeHoverPosition,\n    ] = useState(relativeHoverPosition);\n\n    // Where a new element will be inserted into the item array\n    const [dropTargetIndex, setDropTargetIndex] = useState(null);\n    const [debouncedDropTargetIndex, setDebouncedDropTargetIndex] = useState(\n        dropTargetIndex\n    );\n\n    // Whether or not the timer is active while hovering over an element while dragging\n    const [columnTimerActive, setColumnTimerActive] = useState(false);\n\n    // Configurable debug settings\n    const [slopTiming, setSlopTiming] = useState(\n        +localStorage.getItem(\"slopTiming\") || 150\n    );\n\n    const [translateTiming, setTranslateTiming] = useState(\n        +localStorage.getItem(\"translateTiming\") || 300\n    );\n\n    const [columnDelayTiming, setColumnDelayTiming] = useState(\n        +localStorage.getItem(\"columnDelayTiming\") || 1000\n    );\n\n    const [gridGap, setGridGap] = useState(\n        +localStorage.getItem(\"gridGap\") || 24\n    );\n\n    // Timer for how long to hover before combining elements into multicolumn\n    useTimeout(\n        () => {\n            setDropTargetIndex(dropTargetIndex);\n            setRelativeHoverPosition(\"center\");\n            setColumnTimerActive(false);\n        },\n        !columnTimerActive ? null : columnDelayTiming\n    );\n\n    // Timer for how long to wait before UI updates aka \"slop for the code piggies.\"\n    // For some reason, dndkit fires ondragmove AFTER ondragend if you drag and drop very quickly,\n    // so we have to check if we're actually dragging before applying UI updates.\n    const [uiTimerActive, setUITimerActive] = useState(false);\n    useTimeout(\n        () => {\n            // Double make sure that we're actually dragging.\n            if (draggingElement !== null) {\n                setDebouncedPlacementPreviewStyle(placementPreviewStyle);\n                setDebouncedDropTargetIndex(dropTargetIndex);\n                setDebouncedRelativeHoverPosition(relativeHoverPosition);\n            }\n\n            setUITimerActive(false);\n        },\n        !uiTimerActive ? null : slopTiming\n    );\n\n    useEffect(() => {\n        // Make sure we're actually dragging and that a timer isn't already running\n        if (draggingElement !== null && !uiTimerActive) {\n            setUITimerActive(true);\n        }\n    }, [placementPreviewStyle, dropTargetIndex, relativeHoverPosition]);\n\n    // Position the placement preview\n    useEffect(() => {\n        if (!draggingElement || !closestRow || !items.length) {\n            return;\n        }\n\n        // get the dimensions of the element that matches the droptarget\n        let item = items[dropTargetIndex];\n        if (dropTargetIndex === items.length) {\n            item = items[items.length - 1];\n        }\n\n        if (columnTimerActive && dragCollisions.current) {\n            let c = dragCollisions.current.find((c) => c.id === item.id);\n            if (c) {\n                c = c.data.droppableContainer.rect.current;\n\n                // Transition the placement preview to height = 0 while we wait for the timer\n                let newStyle = {\n                    transition: `height 300ms ease 0s, top 300ms ease 0s`,\n                    top: placementPreviewRef.current.style.top,\n                    left: c.left,\n                    width: c.width,\n                    height: 0,\n                };\n\n                updatePlacementPreviewStyle(placementPreviewStyle, newStyle);\n            }\n        }\n\n        let previewHeight = getPreviewHeight();\n\n        if (relativeHoverPosition === \"center\" && !columnTimerActive) {\n            // We've been hovering long enough and can now show the preview\n            const columnCount = items.find((i) => i.id === closestRow.id)\n                .columns.length;\n\n            const columnWidth =\n                (closestRow.data.droppableContainer.rect.current.width -\n                    gridGap * columnCount) /\n                (columnCount + 1);\n\n            const columnXOffset =\n                closestRow.data.droppableContainer.rect.current.left +\n                columnWidth * columnCount +\n                gridGap * columnCount;\n\n            // There are certain invalid states where we don't want to show a drag preview\n            const validPlacement = isValidPlacement(\n                draggingElement,\n                items,\n                dropTargetIndex\n            );\n\n            if (validPlacement) {\n                let newStyle = {\n                    top: closestRow.data.droppableContainer.rect.current.top,\n                    left: columnXOffset,\n                    width: columnWidth,\n                    height: previewHeight,\n                    transition: `height 300ms ease 0s, top 300ms ease 0s`,\n                };\n                updatePlacementPreviewStyle(placementPreviewStyle, newStyle);\n            } else {\n                setDebouncedDropTargetIndex(null);\n                setDebouncedRelativeHoverPosition(null);\n                setDebouncedPlacementPreviewStyle(defaultPlacementPreviewStyle);\n                setUITimerActive(false);\n            }\n        } else if (!columnTimerActive) {\n            // Render the placement preview\n            if (dragCollisions.current) {\n                let c = dragCollisions.current.find((c) => c.id === item.id);\n\n                if (c) {\n                    const rect = c.data.droppableContainer.rect.current;\n\n                    let additional = 0;\n                    if (dropTargetIndex === items.length) {\n                        additional += rect.height + gridGap;\n                    }\n\n                    // There are certain invalid states where we don't want to show a drag preview\n                    const validPlacement = isValidPlacement(\n                        draggingElement,\n                        items,\n                        dropTargetIndex\n                    );\n\n                    if (validPlacement) {\n                        // Render the placement preview\n                        let newStyle = {\n                            visibility: \"visible\",\n                            width: rect.width,\n                            height: previewHeight,\n                            top: rect.top + additional,\n                            left: rect.left,\n                            transition: `transform ${translateTiming}ms ease 0s, height 400ms ease 0s, top 400ms ease 0s`,\n                        };\n\n                        updatePlacementPreviewStyle(\n                            placementPreviewStyle,\n                            newStyle\n                        );\n                    } else {\n                        setDebouncedDropTargetIndex(null);\n                        setDebouncedRelativeHoverPosition(null);\n                        setDebouncedPlacementPreviewStyle({\n                            ...placementPreviewStyle,\n                            height: 0,\n                        });\n                        setUITimerActive(false);\n                    }\n                }\n            }\n        }\n    }, [relativeHoverPosition, closestRow, dropTargetIndex, columnTimerActive]);\n\n    const handleGridItemClick = (item) => {\n        //setItemToEdit(item);\n        console.log(\"clicked grid item\", item);\n    };\n\n    const handleSaveChanges = (updatedItem) => {\n        setItems(\n            items.map((item) =>\n                item.id === updatedItem.id ? updatedItem : item\n            )\n        );\n        setItemToEdit(null);\n    };\n\n    function handleDragStart(event) {\n        const { active } = event;\n        setDraggingElement(active);\n\n        // While dragging, increase the height of the content area to account for the drag preview dimensions.\n        gridWrapperRef.current.style.height = `${gridWrapperRef.current\n            .clientHeight + active.data.current.height}px`;\n    }\n\n    function handleDragMove(event) {\n        const { collisions } = event;\n        dragCollisions.current = collisions;\n\n        const closestRow = getClosestRow(collisions);\n        setClosestRow(closestRow);\n\n        if (closestRow) {\n            // The coordinates of the element we're hovering over\n            const hoverRect = closestRow.data.droppableContainer.rect.current;\n\n            // Determine mouse position relative to dndkit's closest match\n            const elementHeight =\n                closestRow.data.droppableContainer.rect.current.height;\n            const borderTop = hoverRect.top;\n            const borderBottom = hoverRect.bottom;\n            const topRange = borderTop + elementHeight / 10;\n            const bottomRange = borderBottom - elementHeight / 10;\n\n            const clientOffset = mousePosition.current;\n            const hoveringWithinElement =\n                clientOffset.y >= hoverRect.top &&\n                clientOffset.y <= hoverRect.bottom &&\n                clientOffset.x >= hoverRect.left &&\n                clientOffset.x <= hoverRect.right;\n\n            const insideTop =\n                hoveringWithinElement &&\n                clientOffset.y <= topRange &&\n                clientOffset.y >= borderTop;\n\n            const insideBottom =\n                hoveringWithinElement &&\n                clientOffset.y >= bottomRange &&\n                clientOffset.y <= borderBottom;\n\n            const insideCenter =\n                hoveringWithinElement && !insideTop && !insideBottom;\n\n            const aboveElement =\n                !hoveringWithinElement &&\n                clientOffset.y < hoverRect.top + elementHeight / 2;\n\n            const belowElement =\n                !hoveringWithinElement &&\n                clientOffset.y > hoverRect.top + elementHeight / 2;\n\n            // Determine position of element if it were dropped\n            let dropTarget = items.map((i) => i.id).indexOf(closestRow.id);\n            let hoverPosition = null;\n            if (dropTarget !== -1) {\n                // Where are we hovering near\n                if (aboveElement || insideTop) {\n                    hoverPosition = \"top\";\n                } else if (belowElement || insideBottom) {\n                    hoverPosition = \"bottom\";\n                    dropTarget += 1;\n                } else if (insideCenter) {\n                    hoverPosition = \"center\";\n                }\n\n                setDropTargetIndex(dropTarget);\n                setRelativeHoverPosition(hoverPosition);\n\n                // Cancel the column timer if we ever hover outside the center of the element\n                if (hoverPosition !== \"center\") {\n                    setColumnTimerActive(false);\n                }\n\n                // Start the column timer if we're hovering within an element and weren't already hovering\n                if (\n                    hoverPosition === \"center\" &&\n                    relativeHoverPosition !== \"center\"\n                ) {\n                    setColumnTimerActive(true);\n                }\n            }\n        }\n    }\n\n    function handleDragEnd(event) {\n        const { active, collisions } = event;\n        const closestRow = getClosestRow(collisions);\n\n        if (\n            closestRow &&\n            isValidPlacement(draggingElement, items, dropTargetIndex)\n        ) {\n            if (items.length === 0) {\n                setItems(addElement(0, active.data.current.type, false));\n            } else {\n                let dropIndex = items.map((i) => i.id).indexOf(closestRow.id);\n                if (dropIndex !== -1) {\n                    // If hovering below the object, drop target index will be 1 more than current index\n                    if (relativeHoverPosition === \"bottom\") {\n                        dropIndex += 1;\n                    }\n\n                    const item = getElementById(draggingElement.id);\n                    if (!item) {\n                        setItems(\n                            addElement(\n                                dropIndex,\n                                active.data.current.type,\n                                relativeHoverPosition === \"center\" &&\n                                    !columnTimerActive\n                            )\n                        );\n                    } else {\n                        setItems(\n                            moveElement(\n                                item,\n                                dropIndex,\n                                relativeHoverPosition === \"center\" &&\n                                    !columnTimerActive\n                            )\n                        );\n                    }\n                }\n            }\n        }\n\n        setDraggingElement(null);\n        setClosestRow(null);\n        dragCollisions.current = null;\n        gridWrapperRef.current.style.height = null;\n\n        // We want dropped elements to appear immediately on drag end, so update the debounced values directly\n        setDebouncedDropTargetIndex(null);\n        setDebouncedRelativeHoverPosition(null);\n        setDebouncedPlacementPreviewStyle(defaultPlacementPreviewStyle);\n        setPlacementPreviewStyle(defaultPlacementPreviewStyle);\n        setUITimerActive(false);\n    }\n\n    const getClosestRow = (collisions) => {\n        if (!collisions || !collisions.length) {\n            return null;\n        }\n\n        return collisions.filter(\n            (c) =>\n                c.data.droppableContainer.data.current &&\n                c.data.droppableContainer.data.current.type === \"row\"\n        )[0];\n    };\n\n    function addElement(index, elementType, within) {\n        const newItems = [...items];\n\n        if (!within) {\n            // Add a whole new row\n            const newOb = {\n                id: uuid(),\n                columns: [\n                    {\n                        id: uuid(),\n                        component: elementType,\n                        props: { ...Components[elementType].props },\n                    },\n                ],\n            };\n\n            newItems.splice(index, 0, newOb);\n        } else {\n            // Add a column to an existing row\n            let row = newItems[index];\n            if (row) {\n                row.columns.push({\n                    id: uuid(),\n                    component: elementType,\n                    props: { ...Components[elementType].props },\n                });\n            }\n        }\n        return newItems;\n    }\n\n    function moveElement(item, rowIndex, within) {\n        let newItems = [...items];\n\n        // Find the row where the item currently lives\n        newItems.map((row) => {\n            let column = row.columns.find((col) => col.id === item.id);\n            if (column) {\n                row.columns = row.columns.filter((c) => c.id !== column.id);\n            }\n        });\n\n        if (!within) {\n            const newOb = {\n                id: uuid(),\n                columns: [item],\n            };\n            newItems.splice(rowIndex, 0, newOb);\n        } else {\n            // Add a column to an existing row\n            let row = newItems[rowIndex];\n            if (row) {\n                row.columns.push(item);\n            }\n        }\n\n        // Rows without any columns are empty and should be removed\n        newItems = newItems.filter((row) => row.columns.length > 0);\n\n        return newItems;\n    }\n\n    const getComponentForPreview = () => {\n        if (draggingElement) {\n            const item = getElementById(draggingElement.id);\n            if (item) {\n                // if dragged ele exists in items array, it's an existing element being dragged\n                return constructComponent(Components[item.component]);\n            } else {\n                // new element being dragged\n                return constructComponent(\n                    Components[draggingElement.data.current.type]\n                );\n            }\n        }\n    };\n\n    const getElementById = (id) => {\n        return items.flatMap((row) => row.columns).find((c) => c.id === id);\n    };\n\n    // TODO: Because this is an object, React will re-render every time we update it, even if no properties have changed.\n    // So for now, do a poor man's equality check on the object so we don't update it if it hasn't actually changed.\n    const shouldUpdatePlacementPreviewStyle = (previewStyle, newStyle) => {\n        return (\n            previewStyle.visibility !== newStyle.visibility ||\n            previewStyle.width !== newStyle.width ||\n            previewStyle.height !== newStyle.height ||\n            previewStyle.top !== newStyle.top ||\n            previewStyle.left !== newStyle.left ||\n            previewStyle.transition !== newStyle.transition ||\n            previewStyle.transform !== newStyle.transform\n        );\n    };\n\n    const getPreviewHeight = () => {\n        // Get the height that the preview should be\n        let previewHeight = 0;\n\n        // Dragging a new item, so the height will be included in its data\n        if (\n            draggingElement &&\n            draggingElement.data.current &&\n            draggingElement.data.current.height\n        ) {\n            // If combining into columns, use the height of the row instead\n            if (relativeHoverPosition === \"center\") {\n                previewHeight =\n                    closestRow.data.droppableContainer.rect.current.height;\n            } else {\n                previewHeight = draggingElement.data.current.height;\n            }\n        }\n        // Dragging an existing item\n        else {\n            // Get the height by querying the dom for the element we're currently dragging- better way to handle this?\n            previewHeight = document\n                .getElementById(draggingElement.id)\n                .getBoundingClientRect().height;\n        }\n\n        return previewHeight;\n    };\n\n    const isValidPlacement = (draggingElement, items, dropTargetIndex) => {\n        let validPlacement = true;\n        if (draggingElement.data.current.rowId) {\n            const rowIndex = items.findIndex(\n                (i) => i.id === draggingElement.data.current.rowId\n            );\n            const columnCount = items[rowIndex].columns.length;\n\n            // Can't drop an element on itself or directly adjacent to itself\n            if (\n                columnCount === 1 &&\n                (dropTargetIndex === rowIndex ||\n                    dropTargetIndex === rowIndex + 1) &&\n                relativeHoverPosition !== \"center\"\n            ) {\n                validPlacement = false;\n            }\n\n            // If item is already in a column, don't show drag preview.\n            // This will change once we implement column reordering.\n            if (\n                relativeHoverPosition === \"center\" &&\n                dropTargetIndex === rowIndex\n            ) {\n                validPlacement = false;\n            }\n        }\n\n        return validPlacement;\n    };\n\n    const updatePlacementPreviewStyle = (oldStyle, newStyle) => {\n        if (shouldUpdatePlacementPreviewStyle(oldStyle, newStyle)) {\n            setPlacementPreviewStyle(newStyle);\n        }\n    };\n\n    return (\n        <div\n            className=\"builder\"\n            style={{ cursor: draggingElement ? \"grabbing\" : \"\" }}\n        >\n            <BuilderNavbar />\n            <div className=\"lessons\">lessons</div>\n            <DndContext\n                onDragStart={handleDragStart}\n                onDragEnd={handleDragEnd}\n                onDragMove={handleDragMove}\n                collisionDetection={closestCenter}\n                sensors={sensors}\n                autoScroll={false}\n                modifiers={[snapDragHandleToCursor]}\n            >\n                <div className=\"lesson-content\">\n                    <DebugValues\n                        translateTiming={translateTiming}\n                        setTranslateTiming={setTranslateTiming}\n                        columnDelayTiming={columnDelayTiming}\n                        setColumnDelayTiming={setColumnDelayTiming}\n                        slopTiming={slopTiming}\n                        setSlopTiming={setSlopTiming}\n                        gridGap={gridGap}\n                        setGridGap={setGridGap}\n                    />\n                    <Grid\n                        items={items}\n                        setItems={setItems}\n                        onGridItemClick={handleGridItemClick}\n                        dropTargetIndex={debouncedDropTargetIndex}\n                        placementPreviewStyle={debouncedPlacementPreviewStyle}\n                        relativeHoverPosition={debouncedRelativeHoverPosition}\n                        translateTiming={translateTiming}\n                        columnTimerActive={columnTimerActive}\n                        gridGap={gridGap}\n                        draggingElement={draggingElement}\n                        ref={gridWrapperRef}\n                    />\n                </div>\n                <div className=\"sidebar\" style={{ overflow: \"auto\" }}>\n                    {itemToEdit !== null ? (\n                        <ItemEditor\n                            item={itemToEdit}\n                            onSaveChanges={handleSaveChanges}\n                        />\n                    ) : (\n                        <BuilderElementsMenu />\n                    )}\n                </div>\n                <DragOverlay dropAnimation={null}>\n                    <div className=\"drag-handle-visible\">\n                        <div className=\"dragging drag-overlay\">\n                            {getComponentForPreview()}\n                        </div>\n                        <div className=\"drag-handle\">\n                            <FontAwesomeIcon icon=\"fa-solid fa-up-down-left-right\" />\n                        </div>\n                    </div>\n                </DragOverlay>\n                <PlacementPreview\n                    ref={placementPreviewRef}\n                    style={debouncedPlacementPreviewStyle}\n                >\n                    {getComponentForPreview()}\n                </PlacementPreview>\n            </DndContext>\n        </div>\n    );\n};\n\nexport default PageBuilder;\n","import React from \"react\";\nimport Builder from \"./components/Builder\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n    faImage,\n    faHeading,\n    faParagraph,\n    faTriangleExclamation,\n    faUpDownLeftRight,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(\n    faImage,\n    faHeading,\n    faParagraph,\n    faTriangleExclamation,\n    faUpDownLeftRight\n);\n\nfunction App() {\n    return <Builder />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}